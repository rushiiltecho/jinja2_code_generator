"""
Dynamic API Toolset Registry
============================
Generated registry for all available API toolsets

Generated: {{ "now" | strftime("%Y-%m-%d %H:%M:%S") }}
Total Providers: {{ providers | length }}
Total Toolsets: {{ all_toolsets | length }}
"""

from typing import Dict, Any, Optional, Type, List
import logging

logger = logging.getLogger(__name__)

# Import all generated toolsets
{% for toolset in all_toolsets -%}
try:
    from .{{ toolset.module_name }} import {{ toolset.class_name }}, create_{{ toolset.api_name }}_toolset
except ImportError as e:
    logger.warning(f"Could not import {{ toolset.class_name }}: {e}")
    {{ toolset.class_name }} = None
    create_{{ toolset.api_name }}_toolset = None

{% endfor %}

# Toolset registry - maps API names to toolset classes
TOOLSET_REGISTRY: Dict[str, Type] = {
{% for toolset in all_toolsets -%}
    {% if loop.index0 > 0 %},{% endif %}
    "{{ toolset.api_name }}": {{ toolset.class_name }}
{%- endfor %}
}

# Factory function registry - maps API names to factory functions
FACTORY_REGISTRY: Dict[str, callable] = {
{% for toolset in all_toolsets -%}
    {% if loop.index0 > 0 %},{% endif %}
    "{{ toolset.api_name }}": create_{{ toolset.api_name }}_toolset
{%- endfor %}
}

# Provider registry - groups APIs by provider
PROVIDER_REGISTRY: Dict[str, List[str]] = {
{% for provider, files in providers.items() -%}
    "{{ provider }}": [
        {%- for file_path in files %}
        "{{ file_path.stem.replace('_toolset', '') }}"{% if not loop.last %},{% endif %}
        {%- endfor %}
    ]{% if not loop.last %},{% endif %}
{% endfor %}
}

# Metadata about each toolset
TOOLSET_METADATA: Dict[str, Dict[str, Any]] = {
{% for toolset in all_toolsets -%}
    "{{ toolset.api_name }}": {
        "provider": "{{ toolset.provider }}",
        "class_name": "{{ toolset.class_name }}",
        "module_name": "{{ toolset.module_name }}",
        "factory_function": "create_{{ toolset.api_name }}_toolset"
    }{% if not loop.last %},{% endif %}
{% endfor %}
}


def get_toolset(api_name: str, **kwargs) -> Any:
    """
    Get a toolset instance by API name
    
    Args:
        api_name: Name of the API (e.g., 'google_calendar', 'slack_web_api')
        **kwargs: Configuration parameters for the toolset
        
    Returns:
        Configured toolset instance
        
    Raises:
        ValueError: If the API name is not found
        ImportError: If the toolset class could not be imported
        
    Example:
        >>> calendar_toolset = get_toolset('google_calendar', 
        ...                              client_id='your-id',
        ...                              client_secret='your-secret')
        >>> tools = calendar_toolset.get_tools()
    """
    if api_name not in TOOLSET_REGISTRY:
        available_apis = list(TOOLSET_REGISTRY.keys())
        raise ValueError(f"Unknown API: {api_name}. Available APIs: {available_apis}")
    
    toolset_class = TOOLSET_REGISTRY[api_name]
    if toolset_class is None:
        raise ImportError(f"Toolset class for {api_name} could not be imported")
    
    return toolset_class(**kwargs)


def create_toolset(api_name: str, **kwargs) -> Any:
    """
    Create a toolset instance using the factory function
    
    Args:
        api_name: Name of the API
        **kwargs: Configuration parameters
        
    Returns:
        Configured toolset instance
    """
    if api_name not in FACTORY_REGISTRY:
        available_apis = list(FACTORY_REGISTRY.keys())
        raise ValueError(f"Unknown API: {api_name}. Available APIs: {available_apis}")
    
    factory_function = FACTORY_REGISTRY[api_name]
    if factory_function is None:
        raise ImportError(f"Factory function for {api_name} could not be imported")
    
    return factory_function(**kwargs)


def list_available_toolsets() -> List[str]:
    """
    List all available toolset names
    
    Returns:
        List of API names that can be used with get_toolset()
    """
    return [name for name, cls in TOOLSET_REGISTRY.items() if cls is not None]


def list_providers() -> List[str]:
    """
    List all available providers
    
    Returns:
        List of provider names
    """
    return list(PROVIDER_REGISTRY.keys())


def get_toolsets_by_provider(provider: str) -> List[str]:
    """
    Get all toolsets for a specific provider
    
    Args:
        provider: Provider name (e.g., 'google', 'atlassian', 'slack')
        
    Returns:
        List of API names for the provider
    """
    return PROVIDER_REGISTRY.get(provider, [])


def get_toolset_metadata(api_name: str) -> Dict[str, Any]:
    """
    Get metadata about a specific toolset
    
    Args:
        api_name: Name of the API
        
    Returns:
        Dictionary containing toolset metadata
    """
    return TOOLSET_METADATA.get(api_name, {})


def validate_toolset_imports() -> Dict[str, bool]:
    """
    Validate that all toolsets can be imported successfully
    
    Returns:
        Dictionary mapping API names to import success status
    """
    results = {}
    for api_name, toolset_class in TOOLSET_REGISTRY.items():
        results[api_name] = toolset_class is not None
    return results


def get_toolset_summary() -> Dict[str, Any]:
    """
    Get a summary of the toolset registry
    
    Returns:
        Dictionary containing registry statistics and information
    """
    validation_results = validate_toolset_imports()
    successful_imports = sum(validation_results.values())
    total_toolsets = len(validation_results)
    
    return {
        "total_providers": len(PROVIDER_REGISTRY),
        "total_toolsets": total_toolsets,
        "successful_imports": successful_imports,
        "failed_imports": total_toolsets - successful_imports,
        "import_success_rate": successful_imports / total_toolsets if total_toolsets > 0 else 0,
        "providers": {
            provider: len(apis) for provider, apis in PROVIDER_REGISTRY.items()
        },
        "validation_results": validation_results
    }


# Multi-toolset convenience functions
def create_productivity_agent_toolsets(**kwargs) -> Dict[str, Any]:
    """
    Create a set of toolsets commonly used for productivity agents
    
    Returns:
        Dictionary of toolset instances
    """
    productivity_apis = [
        'google_calendar', 'google_drive', 'gmail',
        'slack_web_api', 'atlassian_jira', 'atlassian_confluence'
    ]
    
    toolsets = {}
    for api_name in productivity_apis:
        try:
            if api_name in TOOLSET_REGISTRY and TOOLSET_REGISTRY[api_name] is not None:
                toolsets[api_name] = get_toolset(api_name, **kwargs)
        except Exception as e:
            logger.warning(f"Could not create toolset for {api_name}: {e}")
    
    return toolsets


def create_sales_agent_toolsets(**kwargs) -> Dict[str, Any]:
    """
    Create a set of toolsets commonly used for sales agents
    
    Returns:
        Dictionary of toolset instances
    """
    sales_apis = [
        'salesforce_rest_api', 'hubspot_crm', 'google_calendar',
        'gmail', 'slack_web_api'
    ]
    
    toolsets = {}
    for api_name in sales_apis:
        try:
            if api_name in TOOLSET_REGISTRY and TOOLSET_REGISTRY[api_name] is not None:
                toolsets[api_name] = get_toolset(api_name, **kwargs)
        except Exception as e:
            logger.warning(f"Could not create toolset for {api_name}: {e}")
    
    return toolsets


def create_content_management_toolsets(**kwargs) -> Dict[str, Any]:
    """
    Create a set of toolsets commonly used for content management
    
    Returns:
        Dictionary of toolset instances
    """
    content_apis = [
        'atlassian_confluence', 'google_drive', 'notion_api',
        'github_rest_api', 'slack_web_api'
    ]
    
    toolsets = {}
    for api_name in content_apis:
        try:
            if api_name in TOOLSET_REGISTRY and TOOLSET_REGISTRY[api_name] is not None:
                toolsets[api_name] = get_toolset(api_name, **kwargs)
        except Exception as e:
            logger.warning(f"Could not create toolset for {api_name}: {e}")
    
    return toolsets


# Export main functions and registries
__all__ = [
    'get_toolset',
    'create_toolset', 
    'list_available_toolsets',
    'list_providers',
    'get_toolsets_by_provider',
    'get_toolset_metadata',
    'validate_toolset_imports',
    'get_toolset_summary',
    'create_productivity_agent_toolsets',
    'create_sales_agent_toolsets',
    'create_content_management_toolsets',
    'TOOLSET_REGISTRY',
    'FACTORY_REGISTRY',
    'PROVIDER_REGISTRY',
    'TOOLSET_METADATA'
]
